# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'MapCfnPropsToResourceResult',
    'AwaitableMapCfnPropsToResourceResult',
    'map_cfn_props_to_resource',
    'map_cfn_props_to_resource_output',
]

@pulumi.output_type
class MapCfnPropsToResourceResult:
    def __init__(__self__, is_supported=None, outputs=None, props=None):
        if is_supported and not isinstance(is_supported, bool):
            raise TypeError("Expected argument 'is_supported' to be a bool")
        pulumi.set(__self__, "is_supported", is_supported)
        if outputs and not isinstance(outputs, list):
            raise TypeError("Expected argument 'outputs' to be a list")
        pulumi.set(__self__, "outputs", outputs)
        if props and not isinstance(props, dict):
            raise TypeError("Expected argument 'props' to be a dict")
        pulumi.set(__self__, "props", props)

    @property
    @pulumi.getter(name="isSupported")
    def is_supported(self) -> bool:
        return pulumi.get(self, "is_supported")

    @property
    @pulumi.getter
    def outputs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "outputs")

    @property
    @pulumi.getter
    def props(self) -> Optional[Any]:
        return pulumi.get(self, "props")


class AwaitableMapCfnPropsToResourceResult(MapCfnPropsToResourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return MapCfnPropsToResourceResult(
            is_supported=self.is_supported,
            outputs=self.outputs,
            props=self.props)


def map_cfn_props_to_resource(cf: Optional[str] = None,
                              props: Optional[Any] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableMapCfnPropsToResourceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cf'] = cf
    __args__['props'] = props
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:index:mapCfnPropsToResource', __args__, opts=opts, typ=MapCfnPropsToResourceResult).value

    return AwaitableMapCfnPropsToResourceResult(
        is_supported=__ret__.is_supported,
        outputs=__ret__.outputs,
        props=__ret__.props)


@_utilities.lift_output_func(map_cfn_props_to_resource)
def map_cfn_props_to_resource_output(cf: Optional[pulumi.Input[str]] = None,
                                     props: Optional[Any] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[MapCfnPropsToResourceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
